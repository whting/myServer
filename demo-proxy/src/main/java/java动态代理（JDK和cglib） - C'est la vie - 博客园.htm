<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="zh-cn">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
<title>java动态代理（JDK和cglib） - C'est la vie - 博客园</title>
<link type="text/css" rel="stylesheet" href="/bundles/blog-common.css?v=vVKakOZtmmmI9PttuB8cajJQIPwEqvGelvnOjnc3uik1"/>
<link id="MainCss" type="text/css" rel="stylesheet" href="/skins/AnotherEon001/bundle-AnotherEon001.css?v=DsZcbW6VqKSWtmU3AMdCzKqev04naWri2cq6hYldwU41"/>
<link title="RSS" type="application/rss+xml" rel="alternate" href="http://www.cnblogs.com/jqyp/rss"/>
<link title="RSD" type="application/rsd+xml" rel="EditURI" href="http://www.cnblogs.com/jqyp/rsd.xml"/>
<link type="application/wlwmanifest+xml" rel="wlwmanifest" href="http://www.cnblogs.com/jqyp/wlwmanifest.xml"/>
<script src="http://common.cnblogs.com/script/jquery.js" type="text/javascript"></script>  
<script type="text/javascript">var currentBlogApp = 'jqyp', cb_enable_mathjax=false;</script>
<script src="/bundles/blog-common.js?v=5SljHjvFayhSwYEpPGn3hGjzMUiUy8_LhBNYFY8TdeA1" type="text/javascript"></script>
</head>
<body>
<a name="top"></a>
<div id="page_begin_html"></div><script>load_page_begin_html();</script>

<div id="wrapper">
<div id="header">

<div id="top">
<h1><a id="Header1_HeaderTitle" class="headermaintitle" href="http://www.cnblogs.com/jqyp/">C'est la vie</a></h1>
<div id="subtitle"></div>
</div>
<div id="sub">
<div class="BlogStats">随笔 - 92, 文章 - 1, 评论 - 82, 引用 - 0</div>
</div>



</div>
<div id="main_container">
<div id="main_content">
<div id="content">
	

	<div class="post">
		<h2>
			<a id="cb_post_title_url" href="http://www.cnblogs.com/jqyp/archive/2010/08/20/1805041.html">java动态代理（JDK和cglib）</a>
		</h2>
		<div class="postbody">
		<div id="cnblogs_post_body"><p>JAVA的动态代理&nbsp;<br />代理模式&nbsp;<br />代理模式是常用的java设计模式，他的特征是代理类与委托类有同样的接口，代理类主要负责为委托类预处理消息、过滤消息、把消息转发给委托类，以及事后处理消息等。代理类与委托类之间通常会存在关联关系，一个代理类的对象与一个委托类的对象关联，代理类的对象本身并不真正实现服务，而是通过调用委托类的对象的相关方法，来提供特定的服务。&nbsp;<br />按照代理的创建时期，代理类可以分为两种。&nbsp;<br />静态代理：由程序员创建或特定工具自动生成源代码，再对其编译。在程序运行前，代理类的.class文件就已经存在了。&nbsp;<br />动态代理：在程序运行时，运用反射机制动态创建而成。&nbsp;
</p>
<p>&nbsp;</p>
<p>首先看一下静态代理：&nbsp;<br />1、Count.java&nbsp;</p>
<div class="dp-highlighter">
<div class="bar">
<div class="tools">Java代码&nbsp;
<object height="15" width="14" data="http://fendoubattier.javaeye.com/javascripts/syntaxhighlighter/clipboard_new.swf" type="application/x-shockwave-flash">
<param name="flashvars" value="clipboard=package%20net.battier.dao%3B%0A%0A%2F**%0A%20*%20%E5%AE%9A%E4%B9%89%E4%B8%80%E4%B8%AA%E8%B4%A6%E6%88%B7%E6%8E%A5%E5%8F%A3%0A%20*%20%0A%20*%20%40author%20Administrator%0A%20*%20%0A%20*%2F%0Apublic%20interface%20Count%20%7B%0A%09%2F%2F%20%E6%9F%A5%E7%9C%8B%E8%B4%A6%E6%88%B7%E6%96%B9%E6%B3%95%0A%09public%20void%20queryCount()%3B%0A%0A%09%2F%2F%20%E4%BF%AE%E6%94%B9%E8%B4%A6%E6%88%B7%E6%96%B9%E6%B3%95%0A%09public%20void%20updateCount()%3B%0A%0A%7D%0A" />
<param name="src" value="http://fendoubattier.javaeye.com/javascripts/syntaxhighlighter/clipboard_new.swf" />
<param name="quality" value="high" />
</object>
</div>
</div>
<ol class="dp-j" start="1">
<li><span><span class="keyword">package</span><span>&nbsp;net.battier.dao;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span><span class="comment">/**</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;*&nbsp;定义一个账户接口</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;*&nbsp;</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;*&nbsp;@author&nbsp;Administrator</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;*&nbsp;</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li>
<li><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">interface</span><span>&nbsp;Count&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;查看账户方法</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">void</span><span>&nbsp;queryCount();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;修改账户方法</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">void</span><span>&nbsp;updateCount();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>
</ol></div>
<p>
<br />2、CountImpl.java&nbsp;</p>
<div class="dp-highlighter">
<div class="bar">
<div class="tools">Java代码&nbsp;
<object height="15" width="14" data="http://fendoubattier.javaeye.com/javascripts/syntaxhighlighter/clipboard_new.swf" type="application/x-shockwave-flash">
<param name="flashvars" value="clipboard=package%20net.battier.dao.impl%3B%0A%0Aimport%20net.battier.dao.Count%3B%0A%0A%2F**%0A%20*%20%E5%A7%94%E6%89%98%E7%B1%BB(%E5%8C%85%E5%90%AB%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91)%0A%20*%20%0A%20*%20%40author%20Administrator%0A%20*%20%0A%20*%2F%0Apublic%20class%20CountImpl%20implements%20Count%20%7B%0A%0A%09%40Override%0A%09public%20void%20queryCount()%20%7B%0A%09%09System.out.println(%22%E6%9F%A5%E7%9C%8B%E8%B4%A6%E6%88%B7%E6%96%B9%E6%B3%95...%22)%3B%0A%0A%09%7D%0A%0A%09%40Override%0A%09public%20void%20updateCount()%20%7B%0A%09%09System.out.println(%22%E4%BF%AE%E6%94%B9%E8%B4%A6%E6%88%B7%E6%96%B9%E6%B3%95...%22)%3B%0A%0A%09%7D%0A%0A%7D%0A%0A%E3%80%81CountProxy.java%0Apackage%20net.battier.dao.impl%3B%0A%0Aimport%20net.battier.dao.Count%3B%0A%0A%2F**%0A%20*%20%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E4%BB%A3%E7%90%86%E7%B1%BB%EF%BC%88%E5%A2%9E%E5%BC%BACountImpl%E5%AE%9E%E7%8E%B0%E7%B1%BB%EF%BC%89%0A%20*%20%0A%20*%20%40author%20Administrator%0A%20*%20%0A%20*%2F%0Apublic%20class%20CountProxy%20implements%20Count%20%7B%0A%09private%20CountImpl%20countImpl%3B%0A%0A%09%2F**%0A%09%20*%20%E8%A6%86%E7%9B%96%E9%BB%98%E8%AE%A4%E6%9E%84%E9%80%A0%E5%99%A8%0A%09%20*%20%0A%09%20*%20%40param%20countImpl%0A%09%20*%2F%0A%09public%20CountProxy(CountImpl%20countImpl)%20%7B%0A%09%09this.countImpl%20%3D%20countImpl%3B%0A%09%7D%0A%0A%09%40Override%0A%09public%20void%20queryCount()%20%7B%0A%09%09System.out.println(%22%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86%E4%B9%8B%E5%89%8D%22)%3B%0A%09%09%2F%2F%20%E8%B0%83%E7%94%A8%E5%A7%94%E6%89%98%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95%3B%0A%09%09countImpl.queryCount()%3B%0A%09%09System.out.println(%22%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86%E4%B9%8B%E5%90%8E%22)%3B%0A%09%7D%0A%0A%09%40Override%0A%09public%20void%20updateCount()%20%7B%0A%09%09System.out.println(%22%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86%E4%B9%8B%E5%89%8D%22)%3B%0A%09%09%2F%2F%20%E8%B0%83%E7%94%A8%E5%A7%94%E6%89%98%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95%3B%0A%09%09countImpl.updateCount()%3B%0A%09%09System.out.println(%22%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86%E4%B9%8B%E5%90%8E%22)%3B%0A%0A%09%7D%0A%0A%7D%0A" />
<param name="src" value="http://fendoubattier.javaeye.com/javascripts/syntaxhighlighter/clipboard_new.swf" />
<param name="quality" value="high" />
</object>
</div>
</div>
<ol class="dp-j" start="1">
<li><span><span class="keyword">package</span><span>&nbsp;net.battier.dao.impl;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span><span class="keyword">import</span><span>&nbsp;net.battier.dao.Count;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span><span class="comment">/**</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;*&nbsp;委托类(包含业务逻辑)</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;*&nbsp;</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;*&nbsp;@author&nbsp;Administrator</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;*&nbsp;</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li>
<li><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">class</span><span>&nbsp;CountImpl&nbsp;</span><span class="keyword">implements</span><span>&nbsp;Count&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">void</span><span>&nbsp;queryCount()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class="string">"查看账户方法..."</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">void</span><span>&nbsp;updateCount()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class="string">"修改账户方法..."</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>、CountProxy.java&nbsp;&nbsp;</span></li>
<li><span><span class="keyword">package</span><span>&nbsp;net.battier.dao.impl;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span><span class="keyword">import</span><span>&nbsp;net.battier.dao.Count;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span><span class="comment">/**</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;*&nbsp;这是一个代理类（增强CountImpl实现类）</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;*&nbsp;</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;*&nbsp;@author&nbsp;Administrator</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;*&nbsp;</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li>
<li><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">class</span><span>&nbsp;CountProxy&nbsp;</span><span class="keyword">implements</span><span>&nbsp;Count&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">private</span><span>&nbsp;CountImpl&nbsp;countImpl;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">/**</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;覆盖默认构造器</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;countImpl</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;CountProxy(CountImpl&nbsp;countImpl)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">this</span><span>.countImpl&nbsp;=&nbsp;countImpl;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">void</span><span>&nbsp;queryCount()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class="string">"事务处理之前"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;调用委托类的方法;</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;countImpl.queryCount();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class="string">"事务处理之后"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">void</span><span>&nbsp;updateCount()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class="string">"事务处理之前"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;调用委托类的方法;</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;countImpl.updateCount();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class="string">"事务处理之后"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>
</ol></div>
<p>&nbsp;</p>
<p>3、TestCount.java&nbsp;</p>
<div class="dp-highlighter">
<div class="bar">
<div class="tools">Java代码&nbsp;
<object height="15" width="14" data="http://fendoubattier.javaeye.com/javascripts/syntaxhighlighter/clipboard_new.swf" type="application/x-shockwave-flash">
<param name="flashvars" value="clipboard=package%20net.battier.test%3B%0A%0Aimport%20net.battier.dao.impl.CountImpl%3B%0Aimport%20net.battier.dao.impl.CountProxy%3B%0A%0A%2F**%0A%20*%E6%B5%8B%E8%AF%95Count%E7%B1%BB%0A%20*%20%0A%20*%20%40author%20Administrator%0A%20*%20%0A%20*%2F%0Apublic%20class%20TestCount%20%7B%0A%09public%20static%20void%20main(String%5B%5D%20args)%20%7B%0A%09%09CountImpl%20countImpl%20%3D%20new%20CountImpl()%3B%0A%09%09CountProxy%20countProxy%20%3D%20new%20CountProxy(countImpl)%3B%0A%09%09countProxy.updateCount()%3B%0A%09%09countProxy.queryCount()%3B%0A%0A%09%7D%0A%7D%0A" />
<param name="src" value="http://fendoubattier.javaeye.com/javascripts/syntaxhighlighter/clipboard_new.swf" />
<param name="quality" value="high" />
</object>
</div>
</div>
<ol class="dp-j" start="1">
<li><span><span class="keyword">package</span><span>&nbsp;net.battier.test;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span><span class="keyword">import</span><span>&nbsp;net.battier.dao.impl.CountImpl;&nbsp;&nbsp;</span></span></li>
<li><span><span class="keyword">import</span><span>&nbsp;net.battier.dao.impl.CountProxy;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span><span class="comment">/**</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;*测试Count类</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;*&nbsp;</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;*&nbsp;@author&nbsp;Administrator</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;*&nbsp;</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li>
<li><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">class</span><span>&nbsp;TestCount&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">static</span><span>&nbsp;</span><span class="keyword">void</span><span>&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CountImpl&nbsp;countImpl&nbsp;=&nbsp;<span class="keyword">new</span><span>&nbsp;CountImpl();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CountProxy&nbsp;countProxy&nbsp;=&nbsp;<span class="keyword">new</span><span>&nbsp;CountProxy(countImpl);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;countProxy.updateCount();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;countProxy.queryCount();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>
</ol></div>
<p>&nbsp;</p>
<p>观察代码可以发现每一个代理类只能为一个接口服务，这样一来程序开发中必然会产生过多的代理，而且，所有的代理操作除了调用的方法不一样之外，其他的操作都一样，则此时肯定是重复代码。解决这一问题最好的做法是可以通过一个代理类完成全部的代理功能，那么此时就必须使用动态代理完成。&nbsp;<br />再来看一下动态代理：&nbsp;<br />JDK动态代理中包含一个类和一个接口：&nbsp;<br />InvocationHandler接口：&nbsp;<br />public interface InvocationHandler {&nbsp;<br />public Object invoke(Object proxy,Method method,Object[] args) throws Throwable;&nbsp;<br />}&nbsp;<br />参数说明：&nbsp;<br />Object proxy：指被代理的对象。&nbsp;<br />Method method：要调用的方法&nbsp;<br />Object[] args：方法调用时所需要的参数&nbsp;</p>
<p>可以将InvocationHandler接口的子类想象成一个代理的最终操作类，替换掉ProxySubject。&nbsp;</p>
<p>Proxy类：&nbsp;<br />Proxy类是专门完成代理的操作类，可以通过此类为一个或多个接口动态地生成实现类，此类提供了如下的操作方法：&nbsp;<br />public static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces,&nbsp;<br />InvocationHandler h)&nbsp;<br />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throws IllegalArgumentException&nbsp;<br />参数说明：&nbsp;<br />ClassLoader loader：类加载器&nbsp;<br />Class&lt;?&gt;[] interfaces：得到全部的接口&nbsp;<br />InvocationHandler h：得到InvocationHandler接口的子类实例&nbsp;</p>
<p>Ps:类加载器&nbsp;<br />在Proxy类中的newProxyInstance（）方法中需要一个ClassLoader类的实例，ClassLoader实际上对应的是类加载器，在Java中主要有一下三种类加载器;&nbsp;<br />Booststrap ClassLoader：此加载器采用C++编写，一般开发中是看不到的；&nbsp;<br />Extendsion ClassLoader：用来进行扩展类的加载，一般对应的是jre\lib\ext目录中的类;&nbsp;<br />AppClassLoader：(默认)加载classpath指定的类，是最常使用的是一种加载器。&nbsp;</p>
<p>动态代理&nbsp;<br />与静态代理类对照的是动态代理类，动态代理类的字节码在程序运行时由Java反射机制动态生成，无需程序员手工编写它的源代码。动态代理类不仅简化了编程工作，而且提高了软件系统的可扩展性，因为Java 反射机制可以生成任意类型的动态代理类。java.lang.reflect 包中的Proxy类和InvocationHandler 接口提供了生成动态代理类的能力。&nbsp;</p>
<p>动态代理示例:&nbsp;<br />1、BookFacade.java&nbsp;</p>
<div class="dp-highlighter">
<div class="bar">
<div class="tools">Java代码&nbsp;
<object height="15" width="14" data="http://fendoubattier.javaeye.com/javascripts/syntaxhighlighter/clipboard_new.swf" type="application/x-shockwave-flash">
<param name="flashvars" value="clipboard=package%20net.battier.dao%3B%0A%0Apublic%20interface%20BookFacade%20%7B%0A%09public%20void%20addBook()%3B%0A%7D%0A" />
<param name="src" value="http://fendoubattier.javaeye.com/javascripts/syntaxhighlighter/clipboard_new.swf" />
<param name="quality" value="high" />
</object>
</div>
</div>
<ol class="dp-j" start="1">
<li><span><span class="keyword">package</span><span>&nbsp;net.battier.dao;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">interface</span><span>&nbsp;BookFacade&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">void</span><span>&nbsp;addBook();&nbsp;&nbsp;</span></span></li>
<li><span>}&nbsp;&nbsp;</span></li>
</ol></div>
<p>&nbsp;</p>
<p>2、BookFacadeImpl.java&nbsp;</p>
<div class="dp-highlighter">
<div class="bar">
<div class="tools">Java代码&nbsp;
<object height="15" width="14" data="http://fendoubattier.javaeye.com/javascripts/syntaxhighlighter/clipboard_new.swf" type="application/x-shockwave-flash">
<param name="flashvars" value="clipboard=package%20net.battier.dao.impl%3B%0A%0Aimport%20net.battier.dao.BookFacade%3B%0A%0Apublic%20class%20BookFacadeImpl%20implements%20BookFacade%20%7B%0A%0A%09%40Override%0A%09public%20void%20addBook()%20%7B%0A%09%09System.out.println(%22%E5%A2%9E%E5%8A%A0%E5%9B%BE%E4%B9%A6%E6%96%B9%E6%B3%95%E3%80%82%E3%80%82%E3%80%82%22)%3B%0A%09%7D%0A%0A%7D%0A%0A%E3%80%81BookFacadeProxy.java%0A%0Apackage%20net.battier.proxy%3B%0A%0Aimport%20java.lang.reflect.InvocationHandler%3B%0Aimport%20java.lang.reflect.Method%3B%0Aimport%20java.lang.reflect.Proxy%3B%0A%0A%2F**%0A%20*%20JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E4%BB%A3%E7%90%86%E7%B1%BB%0A%20*%20%0A%20*%20%40author%20student%0A%20*%20%0A%20*%2F%0Apublic%20class%20BookFacadeProxy%20implements%20InvocationHandler%20%7B%0A%09private%20Object%20target%3B%0A%09%2F**%0A%09%20*%20%E7%BB%91%E5%AE%9A%E5%A7%94%E6%89%98%E5%AF%B9%E8%B1%A1%E5%B9%B6%E8%BF%94%E5%9B%9E%E4%B8%80%E4%B8%AA%E4%BB%A3%E7%90%86%E7%B1%BB%0A%09%20*%20%40param%20target%0A%09%20*%20%40return%0A%09%20*%2F%0A%09public%20Object%20bind(Object%20target)%20%7B%0A%09%09this.target%20%3D%20target%3B%0A%09%09%2F%2F%E5%8F%96%E5%BE%97%E4%BB%A3%E7%90%86%E5%AF%B9%E8%B1%A1%0A%09%09return%20Proxy.newProxyInstance(target.getClass().getClassLoader()%2C%0A%09%09%09%09target.getClass().getInterfaces()%2C%20this)%3B%20%20%20%2F%2F%E8%A6%81%E7%BB%91%E5%AE%9A%E6%8E%A5%E5%8F%A3(%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E7%BC%BA%E9%99%B7%EF%BC%8Ccglib%E5%BC%A5%E8%A1%A5%E4%BA%86%E8%BF%99%E4%B8%80%E7%BC%BA%E9%99%B7)%0A%09%7D%0A%0A%09%40Override%0A%09%2F**%0A%09%20*%20%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95%0A%09%20*%2F%0A%09public%20Object%20invoke(Object%20proxy%2C%20Method%20method%2C%20Object%5B%5D%20args)%0A%09%09%09throws%20Throwable%20%7B%0A%09%09Object%20result%3Dnull%3B%0A%09%09System.out.println(%22%E4%BA%8B%E7%89%A9%E5%BC%80%E5%A7%8B%22)%3B%0A%09%09%2F%2F%E6%89%A7%E8%A1%8C%E6%96%B9%E6%B3%95%0A%09%09result%3Dmethod.invoke(target%2C%20args)%3B%0A%09%09System.out.println(%22%E4%BA%8B%E7%89%A9%E7%BB%93%E6%9D%9F%22)%3B%0A%09%09return%20result%3B%0A%09%7D%0A%0A%7D%0A" />
<param name="src" value="http://fendoubattier.javaeye.com/javascripts/syntaxhighlighter/clipboard_new.swf" />
<param name="quality" value="high" />
</object>
</div>
</div>
<ol class="dp-j" start="1">
<li><span><span class="keyword">package</span><span>&nbsp;net.battier.dao.impl;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span><span class="keyword">import</span><span>&nbsp;net.battier.dao.BookFacade;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">class</span><span>&nbsp;BookFacadeImpl&nbsp;</span><span class="keyword">implements</span><span>&nbsp;BookFacade&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">void</span><span>&nbsp;addBook()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class="string">"增加图书方法。。。"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>、BookFacadeProxy.java&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span><span class="keyword">package</span><span>&nbsp;net.battier.proxy;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span><span class="keyword">import</span><span>&nbsp;java.lang.reflect.InvocationHandler;&nbsp;&nbsp;</span></span></li>
<li><span><span class="keyword">import</span><span>&nbsp;java.lang.reflect.Method;&nbsp;&nbsp;</span></span></li>
<li><span><span class="keyword">import</span><span>&nbsp;java.lang.reflect.Proxy;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span><span class="comment">/**</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;*&nbsp;JDK动态代理代理类</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;*&nbsp;</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;*&nbsp;@author&nbsp;student</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;*&nbsp;</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li>
<li><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">class</span><span>&nbsp;BookFacadeProxy&nbsp;</span><span class="keyword">implements</span><span>&nbsp;InvocationHandler&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">private</span><span>&nbsp;Object&nbsp;target;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">/**</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;绑定委托对象并返回一个代理类</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;target</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;Object&nbsp;bind(Object&nbsp;target)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">this</span><span>.target&nbsp;=&nbsp;target;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//取得代理对象</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;Proxy.newProxyInstance(target.getClass().getClassLoader(),&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;target.getClass().getInterfaces(),&nbsp;<span class="keyword">this</span><span>);&nbsp;&nbsp;&nbsp;</span><span class="comment">//要绑定接口(这是一个缺陷，cglib弥补了这一缺陷)</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">/**</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;调用方法</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;Object&nbsp;invoke(Object&nbsp;proxy,&nbsp;Method&nbsp;method,&nbsp;Object[]&nbsp;args)&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">throws</span><span>&nbsp;Throwable&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Object&nbsp;result=<span class="keyword">null</span><span>;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class="string">"事物开始"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//执行方法</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result=method.invoke(target,&nbsp;args);&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class="string">"事物结束"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;result;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>
</ol></div>
<p>&nbsp;</p>
<p>3、TestProxy.java&nbsp;</p>
<div class="dp-highlighter">
<div class="bar">
<div class="tools">Java代码&nbsp;
<object height="15" width="14" data="http://fendoubattier.javaeye.com/javascripts/syntaxhighlighter/clipboard_new.swf" type="application/x-shockwave-flash">
<param name="flashvars" value="clipboard=package%20net.battier.test%3B%0A%0Aimport%20net.battier.dao.BookFacade%3B%0Aimport%20net.battier.dao.impl.BookFacadeImpl%3B%0Aimport%20net.battier.proxy.BookFacadeProxy%3B%0A%0Apublic%20class%20TestProxy%20%7B%0A%0A%09public%20static%20void%20main(String%5B%5D%20args)%20%7B%0A%09%09BookFacadeProxy%20proxy%20%3D%20new%20BookFacadeProxy()%3B%0A%09%09BookFacade%20bookProxy%20%3D%20(BookFacade)%20proxy.bind(new%20BookFacadeImpl())%3B%0A%09%09bookProxy.addBook()%3B%0A%09%7D%0A%0A%7D%0A" />
<param name="src" value="http://fendoubattier.javaeye.com/javascripts/syntaxhighlighter/clipboard_new.swf" />
<param name="quality" value="high" />
</object>
</div>
</div>
<ol class="dp-j" start="1">
<li><span><span class="keyword">package</span><span>&nbsp;net.battier.test;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span><span class="keyword">import</span><span>&nbsp;net.battier.dao.BookFacade;&nbsp;&nbsp;</span></span></li>
<li><span><span class="keyword">import</span><span>&nbsp;net.battier.dao.impl.BookFacadeImpl;&nbsp;&nbsp;</span></span></li>
<li><span><span class="keyword">import</span><span>&nbsp;net.battier.proxy.BookFacadeProxy;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">class</span><span>&nbsp;TestProxy&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">static</span><span>&nbsp;</span><span class="keyword">void</span><span>&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BookFacadeProxy&nbsp;proxy&nbsp;=&nbsp;<span class="keyword">new</span><span>&nbsp;BookFacadeProxy();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BookFacade&nbsp;bookProxy&nbsp;=&nbsp;(BookFacade)&nbsp;proxy.bind(<span class="keyword">new</span><span>&nbsp;BookFacadeImpl());&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bookProxy.addBook();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>
</ol></div>
<p>&nbsp;</p>
<p>但是，JDK的动态代理依靠接口实现，如果有些类并没有实现接口，则不能使用JDK代理，这就要使用cglib动态代理了。&nbsp;</p>
<p>Cglib动态代理&nbsp;<br />JDK的动态代理机制只能代理实现了接口的类，而不能实现接口的类就不能实现JDK的动态代理，cglib是针对类来实现代理的，他的原理是对指定的目标类生成一个子类，并覆盖其中方法实现增强，但因为采用的是继承，所以不能对final修饰的类进行代理。&nbsp;<br />示例&nbsp;<br />1、BookFacadeCglib.java&nbsp;</p>
<div class="dp-highlighter">
<div class="bar">
<div class="tools">Java代码&nbsp;
<object height="15" width="14" data="http://fendoubattier.javaeye.com/javascripts/syntaxhighlighter/clipboard_new.swf" type="application/x-shockwave-flash">
<param name="flashvars" value="clipboard=package%20net.battier.dao%3B%0A%0Apublic%20interface%20BookFacade%20%7B%0A%09public%20void%20addBook()%3B%0A%7D%0A" />
<param name="src" value="http://fendoubattier.javaeye.com/javascripts/syntaxhighlighter/clipboard_new.swf" />
<param name="quality" value="high" />
</object>
</div>
</div>
<ol class="dp-j" start="1">
<li><span><span class="keyword">package</span><span>&nbsp;net.battier.dao;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">interface</span><span>&nbsp;BookFacade&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">void</span><span>&nbsp;addBook();&nbsp;&nbsp;</span></span></li>
<li><span>}&nbsp;&nbsp;</span></li>
</ol></div>
<p>&nbsp;</p>
<p>2、BookCadeImpl1.java&nbsp;</p>
<div class="dp-highlighter">
<div class="bar">
<div class="tools">Java代码&nbsp;
<object height="15" width="14" data="http://fendoubattier.javaeye.com/javascripts/syntaxhighlighter/clipboard_new.swf" type="application/x-shockwave-flash">
<param name="flashvars" value="clipboard=package%20net.battier.dao.impl%3B%0A%0A%2F**%0A%20*%20%E8%BF%99%E4%B8%AA%E6%98%AF%E6%B2%A1%E6%9C%89%E5%AE%9E%E7%8E%B0%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%B1%BB%0A%20*%20%0A%20*%20%40author%20student%0A%20*%20%0A%20*%2F%0Apublic%20class%20BookFacadeImpl1%20%7B%0A%09public%20void%20addBook()%20%7B%0A%09%09System.out.println(%22%E5%A2%9E%E5%8A%A0%E5%9B%BE%E4%B9%A6%E7%9A%84%E6%99%AE%E9%80%9A%E6%96%B9%E6%B3%95...%22)%3B%0A%09%7D%0A%7D%0A%0A%0A" />
<param name="src" value="http://fendoubattier.javaeye.com/javascripts/syntaxhighlighter/clipboard_new.swf" />
<param name="quality" value="high" />
</object>
</div>
</div>
<ol class="dp-j" start="1">
<li><span><span class="keyword">package</span><span>&nbsp;net.battier.dao.impl;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span><span class="comment">/**</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;*&nbsp;这个是没有实现接口的实现类</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;*&nbsp;</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;*&nbsp;@author&nbsp;student</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;*&nbsp;</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li>
<li><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">class</span><span>&nbsp;BookFacadeImpl1&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">void</span><span>&nbsp;addBook()&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class="string">"增加图书的普通方法..."</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>
</ol></div>
<p>
<br />3、BookFacadeProxy.java&nbsp;</p>
<div class="dp-highlighter">
<div class="bar">
<div class="tools">Java代码&nbsp;
<object height="15" width="14" data="http://fendoubattier.javaeye.com/javascripts/syntaxhighlighter/clipboard_new.swf" type="application/x-shockwave-flash">
<param name="flashvars" value="clipboard=package%20net.battier.proxy%3B%0A%0Aimport%20java.lang.reflect.Method%3B%0A%0Aimport%20net.sf.cglib.proxy.Enhancer%3B%0Aimport%20net.sf.cglib.proxy.MethodInterceptor%3B%0Aimport%20net.sf.cglib.proxy.MethodProxy%3B%0A%0A%2F**%0A%20*%20%E4%BD%BF%E7%94%A8cglib%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%0A%20*%20%0A%20*%20%40author%20student%0A%20*%20%0A%20*%2F%0Apublic%20class%20BookFacadeCglib%20implements%20MethodInterceptor%20%7B%0A%09private%20Object%20target%3B%0A%0A%09%2F**%0A%09%20*%20%E5%88%9B%E5%BB%BA%E4%BB%A3%E7%90%86%E5%AF%B9%E8%B1%A1%0A%09%20*%20%0A%09%20*%20%40param%20target%0A%09%20*%20%40return%0A%09%20*%2F%0A%09public%20Object%20getInstance(Object%20target)%20%7B%0A%09%09this.target%20%3D%20target%3B%0A%09%09Enhancer%20enhancer%20%3D%20new%20Enhancer()%3B%0A%09%09enhancer.setSuperclass(this.target.getClass())%3B%0A%09%09%2F%2F%20%E5%9B%9E%E8%B0%83%E6%96%B9%E6%B3%95%0A%09%09enhancer.setCallback(this)%3B%0A%09%09%2F%2F%20%E5%88%9B%E5%BB%BA%E4%BB%A3%E7%90%86%E5%AF%B9%E8%B1%A1%0A%09%09return%20enhancer.create()%3B%0A%09%7D%0A%0A%09%40Override%0A%09%2F%2F%20%E5%9B%9E%E8%B0%83%E6%96%B9%E6%B3%95%0A%09public%20Object%20intercept(Object%20obj%2C%20Method%20method%2C%20Object%5B%5D%20args%2C%0A%09%09%09MethodProxy%20proxy)%20throws%20Throwable%20%7B%0A%09%09System.out.println(%22%E4%BA%8B%E7%89%A9%E5%BC%80%E5%A7%8B%22)%3B%0A%09%09proxy.invokeSuper(obj%2C%20args)%3B%0A%09%09System.out.println(%22%E4%BA%8B%E7%89%A9%E7%BB%93%E6%9D%9F%22)%3B%0A%09%09return%20null%3B%0A%0A%0A%09%7D%0A%0A%7D%0A%0A" />
<param name="src" value="http://fendoubattier.javaeye.com/javascripts/syntaxhighlighter/clipboard_new.swf" />
<param name="quality" value="high" />
</object>
</div>
</div>
<ol class="dp-j" start="1">
<li><span><span class="keyword">package</span><span>&nbsp;net.battier.proxy;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span><span class="keyword">import</span><span>&nbsp;java.lang.reflect.Method;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span><span class="keyword">import</span><span>&nbsp;net.sf.cglib.proxy.Enhancer;&nbsp;&nbsp;</span></span></li>
<li><span><span class="keyword">import</span><span>&nbsp;net.sf.cglib.proxy.MethodInterceptor;&nbsp;&nbsp;</span></span></li>
<li><span><span class="keyword">import</span><span>&nbsp;net.sf.cglib.proxy.MethodProxy;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span><span class="comment">/**</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;*&nbsp;使用cglib动态代理</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;*&nbsp;</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;*&nbsp;@author&nbsp;student</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;*&nbsp;</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li>
<li><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">class</span><span>&nbsp;BookFacadeCglib&nbsp;</span><span class="keyword">implements</span><span>&nbsp;MethodInterceptor&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">private</span><span>&nbsp;Object&nbsp;target;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">/**</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;创建代理对象</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@param&nbsp;target</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*&nbsp;@return</span>&nbsp;</span></li>
<li><span><span class="comment">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;Object&nbsp;getInstance(Object&nbsp;target)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">this</span><span>.target&nbsp;=&nbsp;target;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Enhancer&nbsp;enhancer&nbsp;=&nbsp;<span class="keyword">new</span><span>&nbsp;Enhancer();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;enhancer.setSuperclass(<span class="keyword">this</span><span>.target.getClass());&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;回调方法</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;enhancer.setCallback(<span class="keyword">this</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;创建代理对象</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;enhancer.create();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="annotation">@Override</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="comment">//&nbsp;回调方法</span><span>&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;Object&nbsp;intercept(Object&nbsp;obj,&nbsp;Method&nbsp;method,&nbsp;Object[]&nbsp;args,&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MethodProxy&nbsp;proxy)&nbsp;<span class="keyword">throws</span><span>&nbsp;Throwable&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class="string">"事物开始"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxy.invokeSuper(obj,&nbsp;args);&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class="string">"事物结束"</span><span>);&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">return</span><span>&nbsp;</span><span class="keyword">null</span><span>;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span>}&nbsp;&nbsp;</span></li>
</ol></div>
<p>
<br />4、TestCglib.java&nbsp;</p>
<div class="dp-highlighter">
<div class="bar">
<div class="tools">Java代码&nbsp;
<object height="15" width="14" data="http://fendoubattier.javaeye.com/javascripts/syntaxhighlighter/clipboard_new.swf" type="application/x-shockwave-flash">
<param name="flashvars" value="clipboard=package%20net.battier.test%3B%0A%0Aimport%20net.battier.dao.impl.BookFacadeImpl1%3B%0Aimport%20net.battier.proxy.BookFacadeCglib%3B%0A%0Apublic%20class%20TestCglib%20%7B%0A%09%0A%09public%20static%20void%20main(String%5B%5D%20args)%20%7B%0A%09%09BookFacadeCglib%20cglib%3Dnew%20BookFacadeCglib()%3B%0A%09%09BookFacadeImpl1%20bookCglib%3D(BookFacadeImpl1)cglib.getInstance(new%20BookFacadeImpl1())%3B%0A%09%09bookCglib.addBook()%3B%0A%09%7D%0A%7D%0A" />
<param name="src" value="http://fendoubattier.javaeye.com/javascripts/syntaxhighlighter/clipboard_new.swf" />
<param name="quality" value="high" />
</object>
</div>
</div>
<ol class="dp-j" start="1">
<li><span><span class="keyword">package</span><span>&nbsp;net.battier.test;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span><span class="keyword">import</span><span>&nbsp;net.battier.dao.impl.BookFacadeImpl1;&nbsp;&nbsp;</span></span></li>
<li><span><span class="keyword">import</span><span>&nbsp;net.battier.proxy.BookFacadeCglib;&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;</span></li>
<li><span><span class="keyword">public</span><span>&nbsp;</span><span class="keyword">class</span><span>&nbsp;TestCglib&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;<span class="keyword">public</span><span>&nbsp;</span><span class="keyword">static</span><span>&nbsp;</span><span class="keyword">void</span><span>&nbsp;main(String[]&nbsp;args)&nbsp;{&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BookFacadeCglib&nbsp;cglib=<span class="keyword">new</span><span>&nbsp;BookFacadeCglib();&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BookFacadeImpl1&nbsp;bookCglib=(BookFacadeImpl1)cglib.getInstance(<span class="keyword">new</span><span>&nbsp;BookFacadeImpl1());&nbsp;&nbsp;</span></span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bookCglib.addBook();&nbsp;&nbsp;</span></li>
<li><span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</span></li>
<li><span>} &nbsp;</span></li>
</ol></div></div><div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
<div id="BlogPostCategory"></div>
<div id="EntryTag"></div>
<div id="blog_post_info">
</div>
<div class="clear"></div>
<div id="post_next_prev"></div>
</div>


		</div>
		<p class="postfoot">
			posted on <span id="post-date">2010-08-20 23:36</span> <a href='http://www.cnblogs.com/jqyp/'>C'est la vie</a> 阅读(<span id="post_view_count">...</span>) 评论(<span id="post_comment_count">...</span>)  <a href ="http://i.cnblogs.com/EditPosts.aspx?postid=1805041" rel="nofollow">编辑</a> <a href="#" onclick="AddToWz(1805041);return false;">收藏</a>
		</p>
	</div>
	<script type="text/javascript">var allowComments=true,isLogined=false,cb_blogId=72483,cb_entryId=1805041,cb_blogApp=currentBlogApp,cb_blogUserGuid='afbcc1a2-ae81-df11-ba8f-001cf0cd104b',cb_entryCreatedDate='2010/8/20 23:36:00';loadViewCount(cb_entryId);</script>
	
	<a name="!comments"></a><div id="blog-comments-placeholder"></div><script type="text/javascript">var commentManager = new blogCommentManager();commentManager.renderComments(0);</script>
<div id="comment_form" class="commentform">
<a name="commentform"></a>
<div id="divCommentShow"></div>
<div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" id="lnk_RefreshComments" onclick="return RefreshCommentList();">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
<div id="comment_form_container"></div>
<div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
<div id="site_nav_under"><a href="http://www.cnblogs.com/" target="_blank" title="开发者的网上家园">博客园首页</a><a href="http://q.cnblogs.com/" target="_blank" title="程序员问答社区">博问</a><a href="http://news.cnblogs.com/" target="_blank" title="IT新闻">新闻</a><a href="http://home.cnblogs.com/ing/" target="_blank">闪存</a><a href="http://job.cnblogs.com/" target="_blank">程序员招聘</a><a href="http://kb.cnblogs.com/" target="_blank">知识库</a></div>
<div id="opt_under_post"></div>
<script type="text/javascript">
    var enableGoogleAd = true;var googletag = googletag || {};googletag.cmd = googletag.cmd || [];
    fixPostBodyFormat();
</script>
<div id="ad_under_post_holder">
<script type='text/javascript'>
    var googletag = googletag || {};
    googletag.cmd = googletag.cmd || [];
    (function () {
        var gads = document.createElement('script');
        gads.async = true;
        gads.type = 'text/javascript';
        var useSSL = 'https:' == document.location.protocol;
        gads.src = (useSSL ? 'https:' : 'http:') +'//www.googletagservices.com/tag/js/gpt.js';
        var node = document.getElementsByTagName('script')[0];
        node.parentNode.insertBefore(gads, node);
    })();
</script>
<script type='text/javascript'>
    try {
        googletag.cmd.push(function () {
            googletag.defineSlot('/1090369/cnblogs_blogpost_C1_sitehome', [300, 250], 'div-gpt-ad-1346480159711-0').addService(googletag.pubads());
            googletag.pubads().enableSingleRequest();
            googletag.enableServices();
        });
    } catch (e) { }
</script>
<div id="google_ad_c1" class="c_ad_block">
    <div id='div-gpt-ad-1346480159711-0' style='width:300px; height:250px;'>
    <script type='text/javascript'>
    try{
        googletag.cmd.push(function () { googletag.display('div-gpt-ad-1346480159711-0'); });
    } catch (e) { }
    </script>
    </div>
</div>
</div>
<div id="blog_news_kb"></div>
<div id="HistoryToday" class="c_ad_block"></div>
<script type="text/javascript">
$(function () {
    loadNewsAndKb();
    loadBlogSignature();
    LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
    GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate);
    loadOptUnderPost();
    GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    $.ajax({ url: 'http://counter.cnblogs.com/blog/post/' + cb_entryId, type: 'get', dataType: 'script', cache: true });
});
</script>
</div>

</div>
</div>
<div id="leftmenu">


<h3>导航</h3>
<ul>
<li>
<a id="MyLinks1_HomeLink" href="http://www.cnblogs.com/">博客园</a></li>
<li>
<a id="MyLinks1_MyHomeLink" class="two_words" href="http://www.cnblogs.com/jqyp/">首页</a></li>
<li>
<a id="MyLinks1_NewPostLink" rel="nofollow" href="http://i.cnblogs.com/EditPosts.aspx?opt=1">新随笔</a></li>
<li>
<a id="MyLinks1_ContactLink" accesskey="9" class="two_words" rel="nofollow" href="http://space.cnblogs.com/msg/send/C%27est+la+vie">联系</a></li>
<li>
<a id="MyLinks1_Syndication" class="two_words" href="http://www.cnblogs.com/jqyp/rss">订阅</a>
<a id="MyLinks1_XMLLink" href="http://www.cnblogs.com/jqyp/rss"><img src="http://www.cnblogs.com/images/xml.gif" alt="订阅" /></a>
</li>
<li>
<a id="MyLinks1_Admin" class="two_words" rel="nofollow" href="http://i.cnblogs.com/">管理</a></li>
</ul>

<div id="blog-calendar" style="display:none"></div><script type="text/javascript">loadBlogDefaultCalendar();</script>
<meta name="vs_showGrid" content="False">

<h3>公告</h3>
<div id="blog-news"></div><script type="text/javascript">loadBlogNews();</script>

<div id="blog-sidecolumn"></div><script type="text/javascript">loadBlogSideColumn();</script>

</div>
</div>
<div class="clear"></div>
<div id="footer">

<p id="footer">
	Powered by: 
	<br />
	
	<a id="Footer1_Hyperlink3" NAME="Hyperlink1" href="http://www.cnblogs.com/" style="font-family:Verdana;font-size:12px;">博客园</a>
	<br />
	Copyright &copy; C'est la vie
</p>
</div>
</div>

<!--PageEndHtml Block Begin-->
<script type="text/javascript" src="http://widgets.amung.us/tab.js"></script><script type="text/javascript">WAU_tab('86vpxf7uy60n', 'left-middle')</script>
<!--PageEndHtml Block End-->
</body>
</html>
